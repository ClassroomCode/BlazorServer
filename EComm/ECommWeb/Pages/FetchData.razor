@page "/fetchdata"

<PageTitle>Products</PageTitle>

@using ECommWeb.Data
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics
@inject IDbContextFactory<ECommContext> DbFactory
@inject NavigationManager NavManager

<h1>Products</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Package</th>
                <th @onclick="SortByPrice">Unit Price</th>
                <th>Supplier</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr class="row-hover" @onclick="() => EditProduct(product.Id)">
                    <td>@product.ProductName</td>
                    <td>@product.Package</td>
                    <td>@product.UnitPrice</td>
                    <td>@product.Supplier?.CompanyName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Product[]? products;

    protected override async Task OnInitializedAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        products = await context.Products
        .Include(p => p.Supplier)
        //.Skip(20).Take(10)
        .AsNoTracking()
        .ToArrayAsync();

        System.Diagnostics.Debug.WriteLine("**** INIT *****");
    }

    private void SortByPrice()
    {
        if (products != null) {
            products = products.OrderBy(p => p.UnitPrice).ToArray();
        }

        /*
        var context = await DbFactory.CreateDbContextAsync();
        products = await context.Products.OrderBy(p => p.UnitPrice)
        .Include(p => p.Supplier)
        .AsNoTracking()
        .ToArrayAsync();
        */
    }

    private void EditProduct(int id)
    {
        NavManager.NavigateTo($"edit/{id}");
    }
}
